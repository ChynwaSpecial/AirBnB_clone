#!/usr/bin/python3
""" Test for Base Model """
from datetime import datetime
from models.base_model import BaseModel

class TestBaseModel(unittest.TestCase):
	"""Test for Base MOdel"""
	def setUp(self):
	"""Instance of a class"""
		self.base_model = BaseModel()

	def test_attritubes(self):
	""" Test if id is a string and not empty """
	self.assertIsInstance(self.base_model.id, str)
	self.assertNotEqual(self.base_model.id, "")

	"""Test if created_at and updated_at are datetime objects"""
	self.assertIsInstance(self.base_model.created_at, datetime)
	self.assertIsInstance(self.base_model.updated_at, datetime)

	def test_str_method(self):
	"""Test __str__ method return string output"""
	expected_str_format = "[{}] ({}) {{}}".format(BaseModel,BaseModel.id, self.BaseModel.__dict__)
        self.assertEqual(str(self.base_model), expected_str_format)

        def test_save_method(self):
            """Test save method"""
            prev_updated_at = self.base_model.updated_at
            next_updated_at = self.base_model.save()
            self.assertNotEqual(prev_updated_at, next_updated_at)

        def test_to_dict_method(self):
            """ Test the to_dict method """
            dict_repr = self.base_model.to_dict()
            """ check if __class__ is added with the correct class name """
            self.assertIn('__class__', dict_repr)
            self.assertEqual(dict_repr['__class__'], 'BaseModel')
            """ Check if created_at and updated_at are converted to string in ISO format """
            self.assertIn('created_at', dict_repr)
            self.assertIn('updated_at', dict_repr)
            self.assertIsInstance(dict_repr['created_at'], str)
            self.assertIsInstance(dict_repr['updated_at'], str)

if __name__ == '__main__':
    unittest.main()
